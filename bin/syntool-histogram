#!/usr/env python
# -*- encoding: utf-8 -*-

"""
Copyright (C) 2014-2018 OceanDataLab

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

from __future__ import print_statement
import ConfigParser
import argparse
import logging
import sys

logger = logging.getLogger()
handler = logging.StreamHandler(stream=sys.stderr)
handler.setLevel(logging.DEBUG)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)


def parse_args():
    """ """
    parser = argparse.ArgumentParser()
    parser.add_argument( 'config'
                       , type=str, action='store'
                       , help='Path to the configuration file')
    parser.add_argument( 'product_id'
                       , type=str, action='store'
                       , help='Identifier of the product')
    parser.add_argument( 'dataset'
                       , type=str, action='store'
                       , help='Dataset ID and type separated by a \'+\' character')
    parser.add_argument( 'x1'
                       , type=float, action='store'
                       , help='Top left X coordinate')
    parser.add_argument( 'y1'
                       , type=float, action='store'
                       , help='Top left Y coordinate')
    parser.add_argument( 'x2'
                       , type=float, action='store'
                       , help='Bottom right X coordinate')
    parser.add_argument( 'y2'
                       , type=float, action='store'
                       , help='Bottom right Y coordinate')
    parser.add_argument( 'zoom_level'
                       , type=int, action='store'
                       , help='Zoom level')

    args = parser.parse_args()
    return args

def parse_cfg(cfg_path):
    """ """
    cfg_parser = ConfigParser.SafeConfigParser()
    cfg_parser.read(cfg_path)
    root_dir = cfg_parser.get('general', 'root_dir')
    download_dir = cfg_parser.get('general', 'download_dir')
    db_host = cfg_parser.get('database', 'host')
    db_user = cfg_parser.get('database', 'user')
    db_password = cfg_parser.get('database', 'password')
    db_name = cfg_parser.get('database', 'name')
    return { 'db_host': db_host
           , 'db_user': db_user
           , 'db_password': db_password
           , 'db_name': db_name
           , 'root_dir': root_dir
           , 'download_dir': download_dir
           }


if '__main__' == __name__:

    # Settings
    # -------------------------------------------------------------------------
    TILE_SIZE = 256
    STEP = 200

    args = parse_args()
    cfg = parse_cfg(args.config)

    # Format args
    # -------------------------------------------------------------------------
    root_dir = cfg['root_dir']
    product_id = args.product_id
    dataset_id, dataset_type = args.dataset.split('+')
    x1 = args.x1
    y1 = args.y1
    x2 = args.x2
    y2 = args.y2
    zoom_level = args.zoom_level

    values = syntool_metadata.histogram.get( root_dir, product_id, dataset_id
                                           , dataset_type, x1, y1, x2, y2
                                           , zoom_level)
    print(values)
